<?php

namespace Tests\Feature\Http\Controllers\Dashboard;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Dashboard\StoryController
 */
class StoryControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function book_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.book', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function book_cover_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.book-cover', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function book_cover_aborts_with_a_404(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        // TODO: perform additional setup to trigger `abort_unless(404)`...

        $response = $this->actingAs($user)->get(route('dashboard.stories.book-cover', [$story]));

        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function cover_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $bookCoverTemplate = \App\Models\BookCoverTemplate::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.cover', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function covers_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $bookCoverTemplates = \App\Models\BookCoverTemplate::factory()->times(3)->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.covers', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $storyTypes = \App\Models\StoryType::factory()->times(3)->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.create'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->delete(route('dashboard.stories.destroy', [$story]));

        $response->assertRedirect(route('dashboard.stories.index'));
        $this->assertModelMissing($story);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.edit', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'index',
            \App\Http\Requests\Stories\StoriesRequest::class
        );
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.index'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function order_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'order',
            \App\Http\Requests\Stories\OrderCostRequest::class
        );
    }

    /**
     * @test
     */
    public function order_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.order', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function ordercost_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'orderCost',
            \App\Http\Requests\Stories\OrderCostRequest::class
        );
    }

    /**
     * @test
     */
    public function order_cost_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->patch(route('dashboard.stories.order.cost', [$story]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function orderpurchase_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'orderPurchase',
            \App\Http\Requests\Stories\OrderCostRequest::class
        );
    }

    /**
     * @test
     */
    public function order_purchase_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('dashboard.stories.order.purchase', [$story]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function order_purchase_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        // TODO: perform additional setup to trigger `abort_unless(403)`...

        $response = $this->actingAs($user)->post(route('dashboard.stories.order.purchase', [$story]), [
            // TODO: send request data
        ]);

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function preview_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.preview', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function savecontents_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'saveContents',
            \App\Http\Requests\Stories\ChapterOrderRequest::class
        );
    }

    /**
     * @test
     */
    public function save_contents_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('dashboard.stories.contents.save', [$story]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.show', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'store',
            \App\Http\Requests\Stories\StoreStoryRequest::class
        );
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('dashboard.stories.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('dashboard.stories.show', compact('story')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\StoryController::class,
            'update',
            \App\Http\Requests\Stories\UpdateStoryRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->put(route('dashboard.stories.update', [$story]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
