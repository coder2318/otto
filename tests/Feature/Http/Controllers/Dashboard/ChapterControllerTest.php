<?php

namespace Tests\Feature\Http\Controllers\Dashboard;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Dashboard\ChapterController
 */
class ChapterControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function attachments_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.attachments', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $timelineQuestion = \App\Models\TimelineQuestion::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.chapters.create', [$story]));

        $response->assertRedirect(route('dashboard.chapters.edit', compact('chapter')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_attachments_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->delete(route('dashboard.chapters.attachments.destroy', [$chapter, 'attachment' => $chapter->attachment]));

        $response->assertRedirect(route('dashboard.chapters.attachments', compact('chapter')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->delete(route('dashboard.chapters.destroy', [$chapter]));

        $response->assertRedirect(route('dashboard.stories.chapters.index', ['story' => $chapter->story_id]));
        $this->assertModelMissing($chapter);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.edit', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function enhance_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.enhance', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function finish_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $timelineQuestions = \App\Models\TimelineQuestion::factory()->times(3)->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.finish', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\ChapterController::class,
            'index',
            \App\Http\Requests\Chapters\ChaptersRequest::class
        );
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.stories.chapters.index', [$story]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function process_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.enhance.stream', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function record_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.record', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.show', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\ChapterController::class,
            'store',
            \App\Http\Requests\Chapters\StoreChapterRequest::class
        );
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $story = \App\Models\Story::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('dashboard.stories.chapters.store', [$story]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('dashboard.chapters.edit', compact('story', 'chapter')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function transcribe_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\ChapterController::class,
            'transcribe',
            \App\Http\Requests\Chapters\TranscribeRequest::class
        );
    }

    /**
     * @test
     */
    public function transcribe_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('dashboard.chapters.attachments.transcribe', [$chapter]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('dashboard.chapters.write', compact('chapter')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\Dashboard\ChapterController::class,
            'update',
            \App\Http\Requests\Chapters\UpdateChapterRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->put(route('dashboard.chapters.update', [$chapter]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route($redirect, compact('chapter', 'story')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function upload_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.upload', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function write_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('dashboard.chapters.write', [$chapter]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
